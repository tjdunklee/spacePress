//------------------------------------//
//  $MIXINS
//------------------------------------//

// Micro clearfix
@mixin clearfix {
  &:after {
    display: table;
    content: "";
    clear: both;
  }
}

// Clear grid floats
@mixin n-up($number) {
  &:nth-of-type(#{$number}n + 1) {
    clear: left;
  }
}

// Clear grid float clears
@mixin clear-n-up($number) {
  &:nth-of-type(#{$number}n + 1) {
    clear: none;
  }
}

// Image replacement
@mixin hide-text {
  border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
}

// Text overflow
// Requires inline-block or block for proper styling
@mixin text-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// WebKit-style focus
@mixin tab-focus {
  // scss-lint:disable DuplicateProperty
  outline: thin dotted #333;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Placeholder text
@mixin placeholder {
  // scss-lint:disable VendorPrefix
  &:-moz-placeholder { @content; } // Firefox 4-18
  &::-moz-placeholder { opacity: 1; @content; } // Firefox 19+
  &:-ms-input-placeholder { @content; } // Internet Explorer 10+
  &::-webkit-input-placeholder { @content; } // Safari and Chrome
}

// Form validation states
@mixin form-control-validation($text-color: $gray-dark, $border-color: $gray) {
  label,
  .radio,
  .checkbox { color: $text-color; }

  .form-control {
    border-color: $border-color;

    &:focus {
      border-color: darken($border-color, 10%);
      box-shadow: 0 0 6px lighten($border-color, 20%);
    }
  }
}

// Form control focus state, based on WebKit's default styles
@mixin form-control-focus($color: #66afe9) {
  $color-rgba: rgba(red($color), green($color), blue($color), .6);

  &:focus {
    border-color: $color;
    outline: 0;
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px $color-rgba;
  }
}


// ***************************************************************************
// Rem conversion mixin
//
// Converts values to rems for any property passed to it. If optional
// $fallback is provided, it returns two lines of code: first with the pixel
// values for non-rem support and a second with the converted rem values.
// This is necessary for IE9/10 when used with psuedo elements or font
// shorthand property. Possible $fallback values are $base-font-size or
// $base-font-size--mobile. This mixin returns just the pixel values to the
// legacy IE CSS file.
//
// USAGE:
//
// .element {
//    @include rem(padding, 4 0 2 1);
//    @include rem(font-size, 2, $base-font-size);
// }
//
// OUTPUT:
//
// .element {
//    padding: 4rem 0 2rem 1rem;
//    font-size: 32px;
//    font-size: 2rem;
// }
//
// OUTPUT TO LEGACY CSS:
//
// .element {
//    padding: 64px 0 32px 16px;
//    font-size: 32px;
// }
//
// ***************************************************************************

@mixin rem($property, $rem-values, $fallback: false) {
  @if not $legacy-ie {
    // Pixel fallbacks.
    // $fallback should be $base-font-size or $base-font-size--mobile.
    @if $fallback {
      #{$property}: map(multiply, $rem-values, $fallback);
    }
    #{$property}: map(multiply, $rem-values, 1rem);
  } @else {
    // Calculate pixel values for legacy browsers that don't support rems.
    #{$property}: map(multiply, $rem-values, $base-font-size);
  }
}


// ***************************************************************************
// Media query mixin
//
// When using spaceBase, styles should be written mobile-first.
// The media mixin can override these base styles in a variety of ways:
//   - starting at a breakpoint ($from: x)
//   - up to a breakpoint ($upto: y)
//   - between two breakpoints ($from: x, $upto: y)
//   - for specific media features (e.g. retina, orientation)
//   - for different media types ($type: print)
//
// You can use breakpoint aliases set in $media-breakpoints (in _vars.scss),
// or custom widths like 480px or 20em.
//
// Commonly-used media features are defined in $media-features (in _vars.scss).
// You can define additional feature aliases or use custom one-off expressions.
//
// It's important to note that $upto is exclusive.
// This means that `@include media($upto: 780px)` will set a max-width of 779px.
//
// USAGE:
//
// @include media($from: hand) { ... }
// @include media($upto: desk) { ... }
// @include media($from: lap, $upto: desk) { ... }
// @include media($from: 800px, $upto: 900px) { ... }
// @include media(landscape, $upto: desk) { ... }
// @include media($type: print) { ... }
// @include media('(device-radius: 50%)') { ... }
//
// OUTPUT:
//
// @media screen and (min-width: 480px) { ... }
// @media screen and (max-width: 1023px) { ... }
// @media screen and (min-width: 768px) and (max-width: 1023px) { ... }
// @media screen and (min-width: 800px) and (max-width: 900px) { ... }
// @media screen and (max-width: 1023px) and (orientation: landscape) { ... }
// @media print { ... }
// @media screen and (device-radius: 50%) { ... }
//
// OUTPUT TO LEGACY CSS:
//
// Only the content needed to render the $legacy-media-breakpoint layout.
//
// ***************************************************************************

@mixin media($feature:false, $from:false, $upto:false, $type:screen) {
  $min-width: 0;
  $max-width: 0;
  $media-query: '';

  // From: this breakpoint (inclusive)
  @if $from {
    @if type-of($from) == number {
      $min-width: $from;
    } @else if get-breakpoint-width($from) {
      $min-width: get-breakpoint-width($from);
    }
  }

  // Upto: that breakpoint (exclusive)
  @if $upto {
    @if type-of($upto) == number {
      $max-width: $upto;
    } @else if get-breakpoint-width($upto) {
      $max-width: get-breakpoint-width($upto) - 1px;
    }
  }

  // Render styles without media queries
  @if $legacy-ie == true {
    $legacy-breakpoint-width: get-breakpoint-width($legacy-media-breakpoint);
    // Output only rules that start at or span our legacy media width
    @if (
      $min-width <= $legacy-breakpoint-width
      and (
        $upto == false or $max-width >= $legacy-breakpoint-width
      )
    ) {
      @content;
    }

  } @else {
    @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }
    @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }
    @if $feature {
      // Pass through custom expression or get defined expression
      $original-feature: $feature;
      $feature: get-feature($feature);
      @if $feature {
        $media-query: '#{$media-query} and #{$feature}';
      } @else {
        $media-query: '#{$media-query} and (#{$original-feature})';
      }
    }

    // Remove unnecessary media query prefix 'all and '
    @if ($type == 'all' and $media-query != '') {
      $type: '';
      $media-query: str-slice(unquote($media-query), 6);
    }

    @media #{$type + $media-query} {
      @content;
    }
  }
}
